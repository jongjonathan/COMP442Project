class POLYNOMIAL {
  public function overload: (l: integer, v: id) => integer;
  public function overload: (l: integer) => integer;

  public attribute eightThree: integer;
  public attribute eightThree: integer;
};
class POLYNOMIAL {
  public function overload: (l: integer, v: id) => integer;
  public function overload: (l: integer) => integer;
};
class LINEAR isa POLYNOMIAL {
  public function overload: (l: integer, v: id) => integer;
  public function overload: (l: integer) => integer;
};
class QUADRATIC isa POLYNOMIAL {
  public function emptyMethod: () => void;
};




function noMethod(arr: integer[], size: integer) => void
{
localvar n: integer;
localvar i: integer;
localvar p: integer;
localvar size: integer[7];

p = size[f];
i = size[helloworld];

n = size;
i = 0;
while (i<n) {
  write(arr[i]);
    i = i+1;
};
}




function duplicateMe(l: integer, v: id) => integer
{
localvar arrDupe: integer[7];
localvar arrDupe: integer[6];

}

function duplicateMe(l: integer, v: id) => integer
{
 localvar dupeA: a;
 localvar dupeA: a;
 localvar b: undeclaredBclass;
}
function duplicateMe(l: integer) => integer
{
}

function main() => void
{
localvar arr: integer[6];

}
function main() => void
{
localvar arr: integer[10];

}