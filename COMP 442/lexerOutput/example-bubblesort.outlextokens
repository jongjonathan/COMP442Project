[BLOCKCOMMENT, /* sort the array */, 1]
[FUNCTIONKEYWORD, function, 2] [ID, bubbleSort, 2] [OPENBRACKET, (, 2] [ID, arr, 2] [COLON, :, 2] [INTEGERKEYWORD, integer, 2] [SQUAREOPENBRACKET, [, 2] [SQUARECLOSEDBRACKET, ], 2] [COMMA, ,, 2] [ID, size, 2] [COLON, :, 2] [INTEGERKEYWORD, integer, 2] [CLOSEDBRACKET, ), 2] [LAMDAEXPRESSION, =>, 2] [VOIDKEYWORD, void, 2]
[CURLYOPENBRACKET, {, 3]
[LOCALVARKEYWORD, localvar, 4] [ID, n, 4] [COLON, :, 4] [INTEGERKEYWORD, integer, 4] [SEMICOLON, ;, 4]
[LOCALVARKEYWORD, localvar, 5] [ID, i, 5] [COLON, :, 5] [INTEGERKEYWORD, integer, 5] [SEMICOLON, ;, 5]
[LOCALVARKEYWORD, localvar, 6] [ID, j, 6] [COLON, :, 6] [INTEGERKEYWORD, integer, 6] [SEMICOLON, ;, 6]
[LOCALVARKEYWORD, localvar, 7] [ID, temp, 7] [COLON, :, 7] [INTEGERKEYWORD, integer, 7] [SEMICOLON, ;, 7]
[ID, n, 8] [EQUAL, =, 8] [ID, size, 8] [SEMICOLON, ;, 8]
[ID, i, 9] [EQUAL, =, 9] [INTEGER, 0, 9] [SEMICOLON, ;, 9]
[ID, j, 10] [EQUAL, =, 10] [INTEGER, 0, 10] [SEMICOLON, ;, 10]
[ID, temp, 11] [EQUAL, =, 11] [INTEGER, 0, 11] [SEMICOLON, ;, 11]
[WHILEKEYWORD, while, 12] [OPENBRACKET, (, 12] [ID, i, 12] [LESSTHAN, <, 12] [ID, n, 12] [SUBTRACT, -, 12] [INTEGER, 1, 12] [CLOSEDBRACKET, ), 12] [CURLYOPENBRACKET, {, 12]
[WHILEKEYWORD, while, 13] [OPENBRACKET, (, 13] [ID, j, 13] [LESSTHAN, <, 13] [ID, n, 13] [SUBTRACT, -, 13] [ID, i, 13] [SUBTRACT, -, 13] [INTEGER, 1, 13] [CLOSEDBRACKET, ), 13] [CURLYOPENBRACKET, {, 13]
[IFKEYWORD, if, 14] [OPENBRACKET, (, 14] [ID, arr, 14] [SQUAREOPENBRACKET, [, 14] [ID, j, 14] [SQUARECLOSEDBRACKET, ], 14] [GREATERTHAN, >, 14] [ID, arr, 14] [SQUAREOPENBRACKET, [, 14] [ID, j, 14] [ADD, +, 14] [INTEGER, 1, 14] [SQUARECLOSEDBRACKET, ], 14] [CLOSEDBRACKET, ), 14]
[THENKEYWORD, then, 15] [CURLYOPENBRACKET, {, 15]
[INLINECOMMENT, // swap temp and arr[i], 16]
[ID, temp, 17] [EQUAL, =, 17] [ID, arr, 17] [SQUAREOPENBRACKET, [, 17] [ID, j, 17] [SQUARECLOSEDBRACKET, ], 17] [SEMICOLON, ;, 17]
[ID, arr, 18] [SQUAREOPENBRACKET, [, 18] [ID, j, 18] [SQUARECLOSEDBRACKET, ], 18] [EQUAL, =, 18] [ID, arr, 18] [SQUAREOPENBRACKET, [, 18] [ID, j, 18] [ADD, +, 18] [INTEGER, 1, 18] [SQUARECLOSEDBRACKET, ], 18] [SEMICOLON, ;, 18]
[ID, arr, 19] [SQUAREOPENBRACKET, [, 19] [ID, j, 19] [ADD, +, 19] [INTEGER, 1, 19] [SQUARECLOSEDBRACKET, ], 19] [EQUAL, =, 19] [ID, temp, 19] [SEMICOLON, ;, 19]
[CURLYCLOSEDBRACKET, }, 20] [ELSEKEYWORD, else, 20] [SEMICOLON, ;, 20]
[ID, j, 21] [EQUAL, =, 21] [ID, j, 21] [ADD, +, 21] [INTEGER, 1, 21] [SEMICOLON, ;, 21]
[CURLYCLOSEDBRACKET, }, 22] [SEMICOLON, ;, 22]
[ID, i, 23] [EQUAL, =, 23] [ID, i, 23] [ADD, +, 23] [INTEGER, 1, 23] [SEMICOLON, ;, 23]
[CURLYCLOSEDBRACKET, }, 24] [SEMICOLON, ;, 24]
[CURLYCLOSEDBRACKET, }, 25]
[BLOCKCOMMENT, /* print the array */, 27]
[FUNCTIONKEYWORD, function, 28] [ID, printArray, 28] [OPENBRACKET, (, 28] [ID, arr, 28] [COLON, :, 28] [INTEGERKEYWORD, integer, 28] [SQUAREOPENBRACKET, [, 28] [SQUARECLOSEDBRACKET, ], 28] [COMMA, ,, 28] [ID, size, 28] [COLON, :, 28] [INTEGERKEYWORD, integer, 28] [CLOSEDBRACKET, ), 28] [LAMDAEXPRESSION, =>, 28] [VOIDKEYWORD, void, 28]
[CURLYOPENBRACKET, {, 29]
[LOCALVARKEYWORD, localvar, 30] [ID, n, 30] [COLON, :, 30] [INTEGERKEYWORD, integer, 30] [SEMICOLON, ;, 30]
[LOCALVARKEYWORD, localvar, 31] [ID, i, 31] [COLON, :, 31] [INTEGERKEYWORD, integer, 31] [SEMICOLON, ;, 31]
[ID, n, 32] [EQUAL, =, 32] [ID, size, 32] [SEMICOLON, ;, 32]
[ID, i, 33] [EQUAL, =, 33] [INTEGER, 0, 33] [SEMICOLON, ;, 33]
[WHILEKEYWORD, while, 34] [OPENBRACKET, (, 34] [ID, i, 34] [LESSTHAN, <, 34] [ID, n, 34] [CLOSEDBRACKET, ), 34] [CURLYOPENBRACKET, {, 34]
[WRITEKEYWORD, write, 35] [OPENBRACKET, (, 35] [ID, arr, 35] [SQUAREOPENBRACKET, [, 35] [ID, i, 35] [SQUARECLOSEDBRACKET, ], 35] [CLOSEDBRACKET, ), 35] [SEMICOLON, ;, 35]
[ID, i, 36] [EQUAL, =, 36] [ID, i, 36] [ADD, +, 36] [INTEGER, 1, 36] [SEMICOLON, ;, 36]
[CURLYCLOSEDBRACKET, }, 37] [SEMICOLON, ;, 37]
[CURLYCLOSEDBRACKET, }, 38]
[INLINECOMMENT, // main funtion to test above, 40]
[FUNCTIONKEYWORD, function, 41] [ID, main, 41] [OPENBRACKET, (, 41] [CLOSEDBRACKET, ), 41] [LAMDAEXPRESSION, =>, 41] [VOIDKEYWORD, void, 41]
[CURLYOPENBRACKET, {, 42]
[LOCALVARKEYWORD, localvar, 43] [ID, arr, 43] [COLON, :, 43] [INTEGERKEYWORD, integer, 43] [SQUAREOPENBRACKET, [, 43] [INTEGER, 7, 43] [SQUARECLOSEDBRACKET, ], 43] [SEMICOLON, ;, 43]
[ID, arr, 44] [SQUAREOPENBRACKET, [, 44] [INTEGER, 0, 44] [SQUARECLOSEDBRACKET, ], 44] [EQUAL, =, 44] [INTEGER, 64, 44] [SEMICOLON, ;, 44]
[ID, arr, 45] [SQUAREOPENBRACKET, [, 45] [INTEGER, 1, 45] [SQUARECLOSEDBRACKET, ], 45] [EQUAL, =, 45] [INTEGER, 34, 45] [SEMICOLON, ;, 45]
[ID, arr, 46] [SQUAREOPENBRACKET, [, 46] [INTEGER, 2, 46] [SQUARECLOSEDBRACKET, ], 46] [EQUAL, =, 46] [INTEGER, 25, 46] [SEMICOLON, ;, 46]
[ID, arr, 47] [SQUAREOPENBRACKET, [, 47] [INTEGER, 3, 47] [SQUARECLOSEDBRACKET, ], 47] [EQUAL, =, 47] [INTEGER, 12, 47] [SEMICOLON, ;, 47]
[ID, arr, 48] [SQUAREOPENBRACKET, [, 48] [INTEGER, 4, 48] [SQUARECLOSEDBRACKET, ], 48] [EQUAL, =, 48] [INTEGER, 22, 48] [SEMICOLON, ;, 48]
[ID, arr, 49] [SQUAREOPENBRACKET, [, 49] [INTEGER, 5, 49] [SQUARECLOSEDBRACKET, ], 49] [EQUAL, =, 49] [INTEGER, 11, 49] [SEMICOLON, ;, 49]
[ID, arr, 50] [SQUAREOPENBRACKET, [, 50] [INTEGER, 6, 50] [SQUARECLOSEDBRACKET, ], 50] [EQUAL, =, 50] [INTEGER, 90, 50] [SEMICOLON, ;, 50]
[ID, printarray, 51] [OPENBRACKET, (, 51] [ID, arr, 51] [COMMA, ,, 51] [INTEGER, 7, 51] [CLOSEDBRACKET, ), 51] [SEMICOLON, ;, 51]
[ID, bubbleSort, 52] [OPENBRACKET, (, 52] [ID, arr, 52] [COMMA, ,, 52] [INTEGER, 7, 52] [CLOSEDBRACKET, ), 52] [SEMICOLON, ;, 52]
[ID, printarray, 53] [OPENBRACKET, (, 53] [ID, arr, 53] [COMMA, ,, 53] [INTEGER, 7, 53] [CLOSEDBRACKET, ), 53] [SEMICOLON, ;, 53]
[CURLYCLOSEDBRACKET, }, 54]
[BLOCKCOMMENT, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 56]
[EOF, eof, 185]