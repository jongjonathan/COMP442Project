[CLASSKEYWORD, class, 1] [ID, SHAPE, 1] [CURLYOPENBRACKET, {, 1]
[PUBLICKEYWORD, public, 2] [ATTRIBUTEKEYWORD, attribute, 2] [ID, a, 2] [COLON, :, 2] [INTEGERKEYWORD, integer, 2] [SEMICOLON, ;, 2] [INLINECOMMENT, //public data member, 2]
[PRIVATEKEYWORD, private, 3] [ATTRIBUTEKEYWORD, attribute, 3] [ID, b, 3] [COLON, :, 3] [FLOATKEYWORD, float, 3] [SEMICOLON, ;, 3] [INLINECOMMENT, //private data member, 3]
[PRIVATEKEYWORD, private, 4] [ATTRIBUTEKEYWORD, attribute, 4] [ID, c, 4] [COLON, :, 4] [ID, id, 4] [SEMICOLON, ;, 4] [INLINECOMMENT, //public data member, 4]
[PUBLICKEYWORD, public, 5] [ATTRIBUTEKEYWORD, attribute, 5] [ID, d, 5] [COLON, :, 5] [INTEGERKEYWORD, integer, 5] [SEMICOLON, ;, 5]
[CURLYCLOSEDBRACKET, }, 6] [SEMICOLON, ;, 6]
[CLASSKEYWORD, class, 7] [ID, SQUARE, 7] [ISAKEYWORD, isa, 7] [ID, SHAPE, 7] [CURLYOPENBRACKET, {, 7]
[PUBLICKEYWORD, public, 8] [ATTRIBUTEKEYWORD, attribute, 8] [ID, a, 8] [COLON, :, 8] [INTEGERKEYWORD, integer, 8] [SEMICOLON, ;, 8] [INLINECOMMENT, //public data member, 8]
[PRIVATEKEYWORD, private, 9] [ATTRIBUTEKEYWORD, attribute, 9] [ID, b, 9] [COLON, :, 9] [FLOATKEYWORD, float, 9] [SEMICOLON, ;, 9] [INLINECOMMENT, //private data member, 9]
[PRIVATEKEYWORD, private, 10] [ATTRIBUTEKEYWORD, attribute, 10] [ID, c, 10] [COLON, :, 10] [ID, id, 10] [SEMICOLON, ;, 10] [INLINECOMMENT, //public data member, 10]
[PUBLICKEYWORD, public, 12] [FUNCTIONKEYWORD, function, 12] [ID, evaluate, 12] [COLON, :, 12] [OPENBRACKET, (, 12] [ID, x, 12] [COLON, :, 12] [FLOATKEYWORD, float, 12] [CLOSEDBRACKET, ), 12] [LAMDAEXPRESSION, =>, 12] [FLOATKEYWORD, float, 12] [SEMICOLON, ;, 12] [INLINECOMMENT, //member func, 12]
[CURLYCLOSEDBRACKET, }, 13] [SEMICOLON, ;, 13]
[FUNCTIONKEYWORD, function, 15] [ID, LINEAR, 15] [DOUBLECOLON, ::, 15] [ID, evaluate, 15] [OPENBRACKET, (, 15] [ID, x, 15] [COLON, :, 15] [FLOATKEYWORD, float, 15] [CLOSEDBRACKET, ), 15] [LAMDAEXPRESSION, =>, 15] [FLOATKEYWORD, float, 15]
[CURLYOPENBRACKET, {, 16]
[LOCALVARKEYWORD, localvar, 17] [ID, result, 17] [COLON, :, 17] [FLOATKEYWORD, float, 17] [SEMICOLON, ;, 17]
[LOCALVARKEYWORD, localvar, 18] [ID, result, 18] [COLON, :, 18] [FLOATKEYWORD, float, 18] [SEMICOLON, ;, 18]
[ID, result, 19] [EQUAL, =, 19] [FLOAT, 0.0, 19] [SEMICOLON, ;, 19]
[ID, result, 20] [EQUAL, =, 20] [ID, a, 20] [MULTIPLY, *, 20] [ID, x, 20] [ADD, +, 20] [ID, b, 20] [SEMICOLON, ;, 20]
[WRITEKEYWORD, write, 21] [OPENBRACKET, (, 21] [ID, result, 21] [CLOSEDBRACKET, ), 21] [SEMICOLON, ;, 21] [INLINECOMMENT, //write, 21]
[READKEYWORD, read, 22] [OPENBRACKET, (, 22] [ID, result, 22] [CLOSEDBRACKET, ), 22] [SEMICOLON, ;, 22] [INLINECOMMENT, //read, 22]
[RETURNKEYWORD, return, 23] [OPENBRACKET, (, 23] [ID, result, 23] [CLOSEDBRACKET, ), 23] [SEMICOLON, ;, 23] [INLINECOMMENT, //return, 23]
[CURLYCLOSEDBRACKET, }, 24]
[FUNCTIONKEYWORD, function, 26] [ID, doo1, 26] [OPENBRACKET, (, 26] [ID, arr, 26] [COLON, :, 26] [INTEGERKEYWORD, integer, 26] [SQUAREOPENBRACKET, [, 26] [SQUARECLOSEDBRACKET, ], 26] [COMMA, ,, 26] [ID, size, 26] [COLON, :, 26] [INTEGERKEYWORD, integer, 26] [CLOSEDBRACKET, ), 26] [LAMDAEXPRESSION, =>, 26] [VOIDKEYWORD, void, 26]
[CURLYOPENBRACKET, {, 27]
[LOCALVARKEYWORD, localvar, 28] [ID, n, 28] [COLON, :, 28] [INTEGERKEYWORD, integer, 28] [SEMICOLON, ;, 28] [INLINECOMMENT, //int decl, 28]
[LOCALVARKEYWORD, localvar, 29] [ID, i, 29] [COLON, :, 29] [FLOATKEYWORD, float, 29] [SEMICOLON, ;, 29] [INLINECOMMENT, //float decl, 29]
[LOCALVARKEYWORD, localvar, 30] [ID, j, 30] [COLON, :, 30] [INTEGERKEYWORD, integer, 30] [SEMICOLON, ;, 30]
[LOCALVARKEYWORD, localvar, 31] [ID, temp, 31] [COLON, :, 31] [INTEGERKEYWORD, integer, 31] [SEMICOLON, ;, 31]
[LOCALVARKEYWORD, localvar, 32] [ID, SQUARE, 32] [COLON, :, 32] [ID, SQUARE, 32] [SEMICOLON, ;, 32] [INLINECOMMENT, //class var, 32]
[LOCALVARKEYWORD, localvar, 33] [ID, arr, 33] [COLON, :, 33] [ID, SQUARE, 33] [SQUAREOPENBRACKET, [, 33] [INTEGER, 8, 33] [SQUARECLOSEDBRACKET, ], 33] [SEMICOLON, ;, 33] [INLINECOMMENT, //class var arr, 33]
[ID, n, 35] [EQUAL, =, 35] [ID, size, 35] [SEMICOLON, ;, 35]
[ID, i, 36] [EQUAL, =, 36] [INTEGER, 0, 36] [SEMICOLON, ;, 36]
[ID, j, 37] [EQUAL, =, 37] [INTEGER, 0, 37] [SEMICOLON, ;, 37]
[ID, temp, 38] [EQUAL, =, 38] [INTEGER, 0, 38] [SEMICOLON, ;, 38]
[WHILEKEYWORD, while, 39] [OPENBRACKET, (, 39] [ID, i, 39] [LESSTHAN, <, 39] [ID, n, 39] [SUBTRACT, -, 39] [INTEGER, 1, 39] [CLOSEDBRACKET, ), 39] [CURLYOPENBRACKET, {, 39] [INLINECOMMENT, //loop, 39]
[WHILEKEYWORD, while, 40] [OPENBRACKET, (, 40] [ID, j, 40] [LESSTHAN, <, 40] [ID, n, 40] [SUBTRACT, -, 40] [ID, i, 40] [SUBTRACT, -, 40] [INTEGER, 1, 40] [MULTIPLY, *, 40] [INTEGER, 5, 40] [ADD, +, 40] [ID, n, 40] [CLOSEDBRACKET, ), 40] [CURLYOPENBRACKET, {, 40]
[IFKEYWORD, if, 41] [OPENBRACKET, (, 41] [ID, arr, 41] [SQUAREOPENBRACKET, [, 41] [ID, j, 41] [MULTIPLY, *, 41] [INTEGER, 1, 41] [SUBTRACT, -, 41] [INTEGER, 5, 41] [SQUARECLOSEDBRACKET, ], 41] [GREATERTHAN, >, 41] [ID, arr, 41] [SQUAREOPENBRACKET, [, 41] [ID, j, 41] [ADD, +, 41] [INTEGER, 1, 41] [DIVIDE, /, 41] [INTEGER, 5, 41] [SQUARECLOSEDBRACKET, ], 41] [CLOSEDBRACKET, ), 41] [INLINECOMMENT, //complex expr, 41]
[THENKEYWORD, then, 42] [CURLYOPENBRACKET, {, 42]
[CURLYCLOSEDBRACKET, }, 43] [ELSEKEYWORD, else, 43] [SEMICOLON, ;, 43]
[CURLYCLOSEDBRACKET, }, 44] [SEMICOLON, ;, 44]
[CURLYCLOSEDBRACKET, }, 45] [SEMICOLON, ;, 45]
[CURLYCLOSEDBRACKET, }, 46]
[FUNCTIONKEYWORD, function, 49] [ID, doo2, 49] [OPENBRACKET, (, 49] [CLOSEDBRACKET, ), 49] [LAMDAEXPRESSION, =>, 49] [INTEGERKEYWORD, integer, 49] [INLINECOMMENT, //free func, 49]
[CURLYOPENBRACKET, {, 50]
[LOCALVARKEYWORD, localvar, 51] [ID, n, 51] [COLON, :, 51] [INTEGERKEYWORD, integer, 51] [SEMICOLON, ;, 51]
[LOCALVARKEYWORD, localvar, 52] [ID, i, 52] [COLON, :, 52] [INTEGERKEYWORD, integer, 52] [SEMICOLON, ;, 52]
[ID, n, 53] [EQUAL, =, 53] [ID, size, 53] [SEMICOLON, ;, 53]
[ID, i, 54] [EQUAL, =, 54] [INTEGER, 0, 54] [SEMICOLON, ;, 54]
[WHILEKEYWORD, while, 55] [OPENBRACKET, (, 55] [ID, i, 55] [LESSTHAN, <, 55] [ID, n, 55] [CLOSEDBRACKET, ), 55] [CURLYOPENBRACKET, {, 55]
[WRITEKEYWORD, write, 56] [OPENBRACKET, (, 56] [ID, arr, 56] [SQUAREOPENBRACKET, [, 56] [ID, i, 56] [SQUARECLOSEDBRACKET, ], 56] [CLOSEDBRACKET, ), 56] [SEMICOLON, ;, 56]
[ID, i, 57] [EQUAL, =, 57] [ID, i, 57] [ADD, +, 57] [INTEGER, 1, 57] [SEMICOLON, ;, 57]
[CURLYCLOSEDBRACKET, }, 58] [SEMICOLON, ;, 58]
[CURLYCLOSEDBRACKET, }, 59]
[FUNCTIONKEYWORD, function, 63] [ID, add, 63] [OPENBRACKET, (, 63] [ID, one, 63] [COLON, :, 63] [INTEGERKEYWORD, integer, 63] [COMMA, ,, 63] [ID, two, 63] [COLON, :, 63] [INTEGERKEYWORD, integer, 63] [CLOSEDBRACKET, ), 63] [LAMDAEXPRESSION, =>, 63] [INTEGERKEYWORD, integer, 63] [CURLYOPENBRACKET, {, 63]
[LOCALVARKEYWORD, localvar, 64] [ID, result, 64] [COLON, :, 64] [INTEGERKEYWORD, integer, 64] [SEMICOLON, ;, 64]
[ID, result, 65] [EQUAL, =, 65] [ID, one, 65] [ADD, +, 65] [ID, two, 65] [SEMICOLON, ;, 65]
[RETURNKEYWORD, return, 66] [OPENBRACKET, (, 66] [ID, result, 66] [CLOSEDBRACKET, ), 66] [SEMICOLON, ;, 66]
[CURLYCLOSEDBRACKET, }, 67]
[FUNCTIONKEYWORD, function, 68] [ID, mult, 68] [OPENBRACKET, (, 68] [ID, one, 68] [COLON, :, 68] [INTEGERKEYWORD, integer, 68] [COMMA, ,, 68] [ID, two, 68] [COLON, :, 68] [INTEGERKEYWORD, integer, 68] [CLOSEDBRACKET, ), 68] [LAMDAEXPRESSION, =>, 68] [INTEGERKEYWORD, integer, 68] [CURLYOPENBRACKET, {, 68]
[LOCALVARKEYWORD, localvar, 69] [ID, result, 69] [COLON, :, 69] [INTEGERKEYWORD, integer, 69] [SEMICOLON, ;, 69]
[ID, result, 70] [EQUAL, =, 70] [ID, one, 70] [ADD, +, 70] [ID, two, 70] [SEMICOLON, ;, 70]
[WRITEKEYWORD, write, 71] [OPENBRACKET, (, 71] [ID, result, 71] [CLOSEDBRACKET, ), 71] [SEMICOLON, ;, 71]
[CURLYCLOSEDBRACKET, }, 72]
[INLINECOMMENT, // main func, 74]
[FUNCTIONKEYWORD, function, 75] [ID, main, 75] [OPENBRACKET, (, 75] [CLOSEDBRACKET, ), 75] [LAMDAEXPRESSION, =>, 75] [VOIDKEYWORD, void, 75] [INLINECOMMENT, //main func, 75]
[CURLYOPENBRACKET, {, 76]
[LOCALVARKEYWORD, localvar, 77] [ID, arr, 77] [COLON, :, 77] [INTEGERKEYWORD, integer, 77] [SQUAREOPENBRACKET, [, 77] [INTEGER, 7, 77] [SQUARECLOSEDBRACKET, ], 77] [SQUAREOPENBRACKET, [, 77] [INTEGER, 6, 77] [SQUARECLOSEDBRACKET, ], 77] [SEMICOLON, ;, 77]
[ID, arr, 78] [SQUAREOPENBRACKET, [, 78] [INTEGER, 0, 78] [SQUARECLOSEDBRACKET, ], 78] [SQUAREOPENBRACKET, [, 78] [INTEGER, 0, 78] [SQUARECLOSEDBRACKET, ], 78] [EQUAL, =, 78] [INTEGER, 64, 78] [SEMICOLON, ;, 78]
[LOCALVARKEYWORD, localvar, 79] [ID, one, 79] [COLON, :, 79] [INTEGERKEYWORD, integer, 79] [SEMICOLON, ;, 79]
[LOCALVARKEYWORD, localvar, 80] [ID, two, 80] [COLON, :, 80] [INTEGERKEYWORD, integer, 80] [SEMICOLON, ;, 80]
[ID, one, 81] [EQUAL, =, 81] [INTEGER, 1, 81] [SEMICOLON, ;, 81]
[ID, two, 82] [EQUAL, =, 82] [INTEGER, 2, 82] [SEMICOLON, ;, 82]
[ID, mult, 84] [OPENBRACKET, (, 84] [ID, one, 84] [COMMA, ,, 84] [ID, two, 84] [CLOSEDBRACKET, ), 84] [SEMICOLON, ;, 84] [INLINECOMMENT, //function as a statement, 84]
[ID, f1, 85] [PERIOD, ., 85] [ID, add, 85] [OPENBRACKET, (, 85] [ID, one, 85] [COMMA, ,, 85] [ID, two, 85] [CLOSEDBRACKET, ), 85] [SEMICOLON, ;, 85] [INLINECOMMENT, //function statement, dot operator, 85]
[ID, one, 86] [EQUAL, =, 86] [ID, arr, 86] [SQUAREOPENBRACKET, [, 86] [INTEGER, 0, 86] [SQUARECLOSEDBRACKET, ], 86] [SQUAREOPENBRACKET, [, 86] [INTEGER, 0, 86] [SQUARECLOSEDBRACKET, ], 86] [SEMICOLON, ;, 86] [INLINECOMMENT, //arrays multi, 86]
[LOCALVARKEYWORD, localvar, 87] [ID, square, 87] [COLON, :, 87] [ID, SQUARE, 87] [SEMICOLON, ;, 87]
[LOCALVARKEYWORD, localvar, 88] [ID, hello, 88] [COLON, :, 88] [ID, id, 88] [SEMICOLON, ;, 88]
[ID, square, 89] [PERIOD, ., 89] [ID, a, 89] [PERIOD, ., 89] [ID, b, 89] [PERIOD, ., 89] [ID, c, 89] [EQUAL, =, 89] [ID, hello, 89] [SEMICOLON, ;, 89] [INLINECOMMENT, //dot, 89]
[CURLYCLOSEDBRACKET, }, 93]
[EOF, eof, 94]