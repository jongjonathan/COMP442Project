[INLINECOMMENT, // ====== struct declarations ====== //, 1]
[CLASSKEYWORD, class, 2] [ID, POLYNOMIAL, 2] [CURLYOPENBRACKET, {, 2]
[PUBLICKEYWORD, public, 3] [FUNCTIONKEYWORD, function, 3] [ID, evaluate, 3] [COLON, :, 3] [OPENBRACKET, (, 3] [ID, x, 3] [COLON, :, 3] [FLOATKEYWORD, float, 3] [CLOSEDBRACKET, ), 3] [LAMDAEXPRESSION, =>, 3] [FLOATKEYWORD, float, 3] [SEMICOLON, ;, 3]
[CURLYCLOSEDBRACKET, }, 4] [SEMICOLON, ;, 4]
[CLASSKEYWORD, class, 6] [ID, LINEAR, 6] [ISAKEYWORD, isa, 6] [ID, POLYNOMIAL, 6] [CURLYOPENBRACKET, {, 6]
[PRIVATEKEYWORD, private, 7] [ATTRIBUTEKEYWORD, attribute, 7] [ID, a, 7] [COLON, :, 7] [FLOATKEYWORD, float, 7] [SEMICOLON, ;, 7]
[PRIVATEKEYWORD, private, 8] [ATTRIBUTEKEYWORD, attribute, 8] [ID, b, 8] [COLON, :, 8] [FLOATKEYWORD, float, 8] [SEMICOLON, ;, 8]
[PUBLICKEYWORD, public, 9] [CONSTRUCTORKEYWORD, constructor, 9] [COLON, :, 9] [OPENBRACKET, (, 9] [ID, A, 9] [COLON, :, 9] [FLOATKEYWORD, float, 9] [COMMA, ,, 9] [ID, B, 9] [COLON, :, 9] [FLOATKEYWORD, float, 9] [CLOSEDBRACKET, ), 9] [SEMICOLON, ;, 9]
[PUBLICKEYWORD, public, 10] [FUNCTIONKEYWORD, function, 10] [ID, evaluate, 10] [COLON, :, 10] [OPENBRACKET, (, 10] [ID, x, 10] [COLON, :, 10] [FLOATKEYWORD, float, 10] [CLOSEDBRACKET, ), 10] [LAMDAEXPRESSION, =>, 10] [FLOATKEYWORD, float, 10] [SEMICOLON, ;, 10]
[CURLYCLOSEDBRACKET, }, 11] [SEMICOLON, ;, 11]
[CLASSKEYWORD, class, 13] [ID, QUADRATIC, 13] [ISAKEYWORD, isa, 13] [ID, POLYNOMIAL, 13] [CURLYOPENBRACKET, {, 13]
[PRIVATEKEYWORD, private, 14] [ATTRIBUTEKEYWORD, attribute, 14] [ID, a, 14] [COLON, :, 14] [FLOATKEYWORD, float, 14] [SEMICOLON, ;, 14]
[PRIVATEKEYWORD, private, 15] [ATTRIBUTEKEYWORD, attribute, 15] [ID, b, 15] [COLON, :, 15] [FLOATKEYWORD, float, 15] [SEMICOLON, ;, 15]
[PRIVATEKEYWORD, private, 16] [ATTRIBUTEKEYWORD, attribute, 16] [ID, c, 16] [COLON, :, 16] [FLOATKEYWORD, float, 16] [SEMICOLON, ;, 16]
[PUBLICKEYWORD, public, 17] [CONSTRUCTORKEYWORD, constructor, 17] [COLON, :, 17] [OPENBRACKET, (, 17] [ID, A, 17] [COLON, :, 17] [FLOATKEYWORD, float, 17] [COMMA, ,, 17] [ID, B, 17] [COLON, :, 17] [FLOATKEYWORD, float, 17] [COMMA, ,, 17] [ID, C, 17] [COLON, :, 17] [FLOATKEYWORD, float, 17] [CLOSEDBRACKET, ), 17] [SEMICOLON, ;, 17]
[PUBLICKEYWORD, public, 18] [FUNCTIONKEYWORD, function, 18] [ID, evaluate, 18] [COLON, :, 18] [OPENBRACKET, (, 18] [ID, x, 18] [COLON, :, 18] [FLOATKEYWORD, float, 18] [CLOSEDBRACKET, ), 18] [LAMDAEXPRESSION, =>, 18] [FLOATKEYWORD, float, 18] [SEMICOLON, ;, 18]
[CURLYCLOSEDBRACKET, }, 19] [SEMICOLON, ;, 19]
[INLINECOMMENT, // ====== member function implementations ====== //  , 21]
[FUNCTIONKEYWORD, function, 22] [ID, POLYNOMIAL, 22] [DOUBLECOLON, ::, 22] [ID, evaluate, 22] [OPENBRACKET, (, 22] [ID, x, 22] [COLON, :, 22] [FLOATKEYWORD, float, 22] [CLOSEDBRACKET, ), 22] [LAMDAEXPRESSION, =>, 22] [FLOATKEYWORD, float, 22]
[CURLYOPENBRACKET, {, 23]
[RETURNKEYWORD, return, 24] [OPENBRACKET, (, 24] [INTEGER, 0, 24] [CLOSEDBRACKET, ), 24] [SEMICOLON, ;, 24]
[CURLYCLOSEDBRACKET, }, 25]
[FUNCTIONKEYWORD, function, 27] [ID, QUADRATIC, 27] [DOUBLECOLON, ::, 27] [ID, evaluate, 27] [OPENBRACKET, (, 27] [ID, x, 27] [COLON, :, 27] [FLOATKEYWORD, float, 27] [CLOSEDBRACKET, ), 27] [LAMDAEXPRESSION, =>, 27] [FLOATKEYWORD, float, 27]
[CURLYOPENBRACKET, {, 28]
[LOCALVARKEYWORD, localvar, 29] [ID, result, 29] [COLON, :, 29] [FLOATKEYWORD, float, 29] [SEMICOLON, ;, 29]
[INLINECOMMENT, //Using Horner's method, 30]
[ID, result, 31] [EQUAL, =, 31] [ID, a, 31] [SEMICOLON, ;, 31]
[ID, result, 32] [EQUAL, =, 32] [ID, result, 32] [MULTIPLY, *, 32] [ID, x, 32] [ADD, +, 32] [ID, b, 32] [SEMICOLON, ;, 32]
[ID, result, 33] [EQUAL, =, 33] [ID, result, 33] [MULTIPLY, *, 33] [ID, x, 33] [ADD, +, 33] [ID, c, 33] [SEMICOLON, ;, 33]
[RETURNKEYWORD, return, 34] [OPENBRACKET, (, 34] [ID, result, 34] [CLOSEDBRACKET, ), 34] [SEMICOLON, ;, 34]
[CURLYCLOSEDBRACKET, }, 35]
[FUNCTIONKEYWORD, function, 37] [ID, QUADRATIC, 37] [DOUBLECOLON, ::, 37] [CONSTRUCTORKEYWORD, constructor, 37] [OPENBRACKET, (, 37] [ID, A, 37] [COLON, :, 37] [FLOATKEYWORD, float, 37] [COMMA, ,, 37] [ID, B, 37] [COLON, :, 37] [FLOATKEYWORD, float, 37] [COMMA, ,, 37] [ID, C, 37] [COLON, :, 37] [FLOATKEYWORD, float, 37] [CLOSEDBRACKET, ), 37]
[CURLYOPENBRACKET, {, 38]
[SELFKEYWORD, self, 39] [PERIOD, ., 39] [ID, a, 39] [EQUAL, =, 39] [ID, A, 39] [SEMICOLON, ;, 39]
[SELFKEYWORD, self, 40] [PERIOD, ., 40] [ID, b, 40] [EQUAL, =, 40] [ID, B, 40] [SEMICOLON, ;, 40]
[SELFKEYWORD, self, 41] [PERIOD, ., 41] [ID, c, 41] [EQUAL, =, 41] [ID, C, 41] [SEMICOLON, ;, 41]
[CURLYCLOSEDBRACKET, }, 42]
[FUNCTIONKEYWORD, function, 44] [ID, LINEAR, 44] [DOUBLECOLON, ::, 44] [CONSTRUCTORKEYWORD, constructor, 44] [OPENBRACKET, (, 44] [ID, A, 44] [COLON, :, 44] [FLOATKEYWORD, float, 44] [COMMA, ,, 44] [ID, B, 44] [COLON, :, 44] [FLOATKEYWORD, float, 44] [CLOSEDBRACKET, ), 44]
[CURLYOPENBRACKET, {, 45]
[SELFKEYWORD, self, 46] [PERIOD, ., 46] [ID, a, 46] [EQUAL, =, 46] [ID, A, 46] [SEMICOLON, ;, 46]
[SELFKEYWORD, self, 47] [PERIOD, ., 47] [ID, b, 47] [EQUAL, =, 47] [ID, B, 47] [SEMICOLON, ;, 47]
[CURLYCLOSEDBRACKET, }, 48]
[FUNCTIONKEYWORD, function, 50] [ID, LINEAR, 50] [DOUBLECOLON, ::, 50] [ID, evaluate, 50] [OPENBRACKET, (, 50] [ID, x, 50] [COLON, :, 50] [FLOATKEYWORD, float, 50] [CLOSEDBRACKET, ), 50] [LAMDAEXPRESSION, =>, 50] [FLOATKEYWORD, float, 50]
[CURLYOPENBRACKET, {, 51]
[LOCALVARKEYWORD, localvar, 52] [ID, result, 52] [COLON, :, 52] [FLOATKEYWORD, float, 52] [SEMICOLON, ;, 52]
[ID, result, 53] [EQUAL, =, 53] [FLOAT, 0.0, 53] [SEMICOLON, ;, 53]
[ID, result, 54] [EQUAL, =, 54] [ID, a, 54] [MULTIPLY, *, 54] [ID, x, 54] [ADD, +, 54] [ID, b, 54] [SEMICOLON, ;, 54]
[RETURNKEYWORD, return, 55] [OPENBRACKET, (, 55] [ID, result, 55] [CLOSEDBRACKET, ), 55] [SEMICOLON, ;, 55]
[CURLYCLOSEDBRACKET, }, 56]
[INLINECOMMENT, // ====== main ====== //, 58]
[FUNCTIONKEYWORD, function, 59] [ID, main, 59] [OPENBRACKET, (, 59] [CLOSEDBRACKET, ), 59] [LAMDAEXPRESSION, =>, 59] [VOIDKEYWORD, void, 59]
[CURLYOPENBRACKET, {, 60]
[LOCALVARKEYWORD, localvar, 61] [ID, f1, 61] [COLON, :, 61] [ID, LINEAR, 61] [OPENBRACKET, (, 61] [INTEGER, 2, 61] [COMMA, ,, 61] [FLOAT, 3.5, 61] [CLOSEDBRACKET, ), 61] [SEMICOLON, ;, 61]
[LOCALVARKEYWORD, localvar, 62] [ID, f2, 62] [COLON, :, 62] [ID, QUADRATIC, 62] [OPENBRACKET, (, 62] [SUBTRACT, -, 62] [FLOAT, 2.0, 62] [COMMA, ,, 62] [FLOAT, 1.0, 62] [COMMA, ,, 62] [FLOAT, 0.0, 62] [CLOSEDBRACKET, ), 62] [SEMICOLON, ;, 62]
[LOCALVARKEYWORD, localvar, 63] [ID, counter, 63] [COLON, :, 63] [INTEGERKEYWORD, integer, 63] [EQUAL, =, 63] [INTEGER, 1, 63] [SEMICOLON, ;, 63]
[WHILEKEYWORD, while, 65] [OPENBRACKET, (, 65] [ID, counter, 65] [LESSTHANEQUAL, <=, 65] [INTEGER, 10, 65] [CLOSEDBRACKET, ), 65]
[CURLYOPENBRACKET, {, 66]
[WRITEKEYWORD, write, 67] [OPENBRACKET, (, 67] [ID, counter, 67] [CLOSEDBRACKET, ), 67] [SEMICOLON, ;, 67]
[WRITEKEYWORD, write, 68] [OPENBRACKET, (, 68] [ID, f1, 68] [PERIOD, ., 68] [ID, evaluate, 68] [OPENBRACKET, (, 68] [ID, counter, 68] [CLOSEDBRACKET, ), 68] [CLOSEDBRACKET, ), 68] [SEMICOLON, ;, 68]
[WRITEKEYWORD, write, 69] [OPENBRACKET, (, 69] [ID, f2, 69] [PERIOD, ., 69] [ID, evaluate, 69] [OPENBRACKET, (, 69] [ID, counter, 69] [CLOSEDBRACKET, ), 69] [CLOSEDBRACKET, ), 69] [SEMICOLON, ;, 69]
[CURLYCLOSEDBRACKET, }, 70] [SEMICOLON, ;, 70]
[CURLYCLOSEDBRACKET, }, 71]
[BLOCKCOMMENT, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 72]